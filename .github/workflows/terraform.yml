name: Terraform

on:
  push:
    branches:
      - master
  pull_request: ~

env:
  is_production: ${{ github.ref == 'refs/head/master' && github.event_name == 'push' }}

jobs:
  collect_jobs:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: master
      - uses: actions/checkout@v2
      - name: Collect Jobs
        id: set-matrix
        run: echo "::set-output name=matrix::$(./.github/workflows/scripts/collect_jobs.sh)"

  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    needs: collect_jobs
    defaults:
      run:
        working-directory: ${{ matrix.project_dir }}
    strategy:
      matrix: ${{ fromJson(needs.collect_jobs.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1

      - name: Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: ${{ env.is_production == 'true' }}

      - name: Initialize
        id: init
        run: terraform init -input=false

      - name: Set Workspace (development)
        if: ${{ env.is_production == 'false' }}
        run: terraform workspace select development || terraform workspace new development

      - name: Set Workspace (production)
        if: ${{ env.is_production == 'true' }}
        run: |
          echo "$is_production"
          terraform workspace select production || terraform workspace new production

      - name: Validate
        id: validate
        run: terraform validate

      - name: Plan
        run: terraform plan -input=false
        continue-on-error: ${{ env.is_production == 'false' }}

      - name: Apply
        if: ${{ env.is_production == 'true' }}
        run: echo "terraform apply -input=false -auto-approve"
